# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

analyzer:
  # Treat warnings as errors to match CI behavior
  errors:
    # These will cause the analyzer to fail, matching CI
    unused_element: warning
    unused_local_variable: warning
    deprecated_member_use: info
    unnecessary_import: info
    
  # Exclude generated files
  exclude:
    - "**/*.g.dart"
    - "**/*.freezed.dart"
    - "build/**"

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # Strictness matching CI
    prefer_single_quotes: true
    prefer_const_constructors: true
    prefer_final_fields: true
    unnecessary_to_list_in_spreads: true
    curly_braces_in_flow_control_structures: true
    avoid_print: false  # Allow print for debugging

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
